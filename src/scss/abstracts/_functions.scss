// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------
@use "sass:map";

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
	@return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
	@return asset($base, "images/", $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
	@return asset($base, "fonts/", $path);
}

/// Converts font-size in pixels to rems
/// @author Maksim Vasyanovich
/// @link https://github.com/maxdenaro/gulp-maxgraph
/// @param {Num} $pixels - font size in pixels
/// @return {String}
/// @require browser-context - set at typography.scss
@function rem($pixels, $context: $browser-context) {
	@return #{calc($pixels / $context)}rem;
}

/// Установить цвет как css var(--xxx)
/// А если его нет в мапе, добавить дефолтный чёрный
/// @author Evgeny Ilyin
/// @param {String} $color-name - key @ $colors in _color-map.scss
/// @return {String}
/// @require "sass:map"
@function color($color-name) {
	@if map.get($colors, $color-name) {
		@return var(--#{$color-name});
	} @else {
		@return var(--#{$color-name}, #000);
	}
}